#!/bin/bash
# Hyprland Display-Aware Workspace Command Wrapper
#
# Description:
# This script intelligently generates a static Hyprland config file for workspace
# bindings and only rewrites it when your monitor configuration changes.
# This avoids slow startup times caused by running `hyprctl` commands repeatedly.
#
# The generated config file can be sourced in your main hyprland.conf.
# e.g., source = ~/.config/hypr/scripts/ssw.conf
#
# It then calculates the target workspace based on the focused monitor,
# allowing for consistent and FAST workspace management across multiple displays.
#
# Formula: target_workspace = input_workspace + (monitor_id - 1) * 10
#
# Usage: ./hypr_workspace.sh <command> <workspace_number>

# --- Initial Validation ---
if [ $# -ne 2 ]; then
  echo "Usage: $0 <command> <workspace_number>"
  echo "Commands: workspace, movetoworkspace, movetoworkspacesilent"
  echo "workspace_number should be 1-10"
  exit 1
fi

command=$1
input_workspace=$2

# Validate input workspace is a number between 1 and 10
if ! [[ "$input_workspace" =~ ^[1-9]$|^10$ ]]; then
  echo "Error: workspace_number must be between 1 and 10."
  exit 1
fi

# Validate command is one of the allowed Hyprland dispatches
case "$command" in
workspace | movetoworkspace | movetoworkspacesilent) ;;
*)
  echo "Error: Invalid command. Use 'workspace', 'movetoworkspace', or 'movetoworkspacesilent'."
  exit 1
  ;;
esac

# --- Configuration File Setup ---
# The script will generate the workspace config at this location.
# Using $HOME ensures the tilde `~` is expanded correctly.
CONF_FILE="$HOME/.config/hypr/scripts/ssw.conf"
CONF_DIR=$(dirname "$CONF_FILE")

# --- Monitor Detection and Conditional Config Generation ---

# Check for jq dependency, which is required for reliable JSON parsing
if ! command -v jq >/dev/null 2>&1; then
  echo "Error: 'jq' is not installed. Please install it to use this script."
  exit 1
fi

# Get a list of all monitor names. This order is assumed to be stable from hyprctl.
mapfile -t monitor_names < <(hyprctl monitors -j | jq -r '.[].name')
# Create a single string representation of the current monitor setup for easy comparison.
current_monitor_config=$(printf "%s " "${monitor_names[@]}")

# Read the monitor configuration from the header of the existing config file.
previous_monitor_config=""
if [ -f "$CONF_FILE" ]; then
  # Extracts the monitor list from a line like "# MONITORS: DP-1 HDMI-A-1"
  previous_monitor_config=$(grep '^# MONITORS:' "$CONF_FILE" | sed 's/# MONITORS: //')
fi

# Compare current config with the cached one. If they differ, regenerate the config file.
if [ "$current_monitor_config" != "$previous_monitor_config" ]; then
  echo "Debug: Monitor configuration changed. Regenerating config file at $CONF_FILE..."

  # Ensure the config directory exists
  mkdir -p "$CONF_DIR"

  # Write the new config file from scratch
  {
    echo "# MONITORS: $current_monitor_config"
    echo "# This file is auto-generated by hypr_workspace.sh. Do not edit manually."
    echo "# Generated on: $(date)"
    echo ""

    # This section generates the workspace-to-monitor binding rules.
    for i in "${!monitor_names[@]}"; do
      monitor_id_for_binding=$((i + 1))
      monitor_name_for_binding="${monitor_names[$i]}"

      echo "# Bindings for Monitor $monitor_id_for_binding: $monitor_name_for_binding"
      # Assign 10 workspaces to the current monitor
      for j in {1..10}; do
        workspace_to_bind=$(((monitor_id_for_binding - 1) * 10 + j))
        echo "workspace = $workspace_to_bind,monitor:$monitor_name_for_binding,persistent:true"
      done
      echo ""
    done
  } >"$CONF_FILE"

  echo "Debug: Config file regenerated. Please reload Hyprland for changes to take effect."
fi

# --- Focused Monitor Detection ---

# Get the name of the currently focused monitor.
focused_monitor_name=$(hyprctl monitors -j | jq -r '.[] | select(.focused == true) | .name')

# If no monitor is actively focused (can happen in some edge cases),
# fall back to finding the monitor that contains the active window.
if [ -z "$focused_monitor_name" ]; then
  echo "Debug: No focused monitor detected, checking active window's monitor..."
  focused_monitor_name=$(hyprctl activewindow -j | jq -r '.monitor')
fi

# Find the sequential ID (1-based index) of the focused monitor from our array.
monitor_id=0
for i in "${!monitor_names[@]}"; do
  if [[ "${monitor_names[$i]}" == "$focused_monitor_name" ]]; then
    # Bash arrays are 0-indexed, so add 1 for a 1-based ID (1, 2, 3...).
    monitor_id=$((i + 1))
    break
  fi
done

# If we couldn't find the monitor for some reason, exit with an error.
if [ "$monitor_id" -eq 0 ]; then
  echo "Error: Could not determine a valid ID for the focused monitor ('$focused_monitor_name')."
  echo "Available monitors found: ${monitor_names[*]}"
  exit 1
fi

# --- Workspace Calculation and Execution ---

# Calculate the target workspace using the scalable formula.
target_workspace=$((input_workspace + (monitor_id - 1) * 10))

echo "Debug: Detected Monitor: '$focused_monitor_name' (ID: $monitor_id)"
echo "Debug: Input: $input_workspace -> Target: $target_workspace"

# Execute the final command using hyprctl.
hyprctl dispatch "$command" "$target_workspace"

echo "Executed: hyprctl dispatch $command $target_workspace"
